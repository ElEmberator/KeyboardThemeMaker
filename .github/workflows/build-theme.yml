name: Keyboard Theme Builder

on:
  workflow_dispatch:
    inputs:
      theme_name:
        description: 'Name of the theme to build'
        required: true
        type: string
        pattern: '^[a-zA-Z0-9_-]{3,50}$'
        
permissions:
  contents: write  # Needed to upload releases
  actions: write   # Needed to trigger workflows
  
env:
  THEME_NAME: ${{ inputs.theme_name }}
  BUILD_DIR: ${{ github.workspace }}/build
  THEME_DIR: ${{ github.workspace }}/theme
  APK_NAME: ${{ format('{0}_keyboard.apk', inputs.theme_name) }}

jobs:
  validate_theme:
    name: Validate Theme Exists
    runs-on: ubuntu-latest
    outputs:
      theme_exists: ${{ steps.check_theme.outputs.exists }}
      theme_url: ${{ steps.check_theme.outputs.url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check theme availability
        id: check_theme
        run: |
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/contents/themes/${THEME_NAME}.zip")
          
          download_url=$(echo "$response" | jq -r '.download_url // empty')
          
          if [ -n "$download_url" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "url=$download_url" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Theme $THEME_NAME not found in repository" >&2
          fi

  build_apk:
    name: Build APK
    needs: validate_theme
    if: needs.validate_theme.outputs.theme_exists == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Download theme resources
        run: |
          mkdir -p $THEME_DIR/res
          echo "Downloading theme from ${{ needs.validate_theme.outputs.theme_url }}"
          curl -L "${{ needs.validate_theme.outputs.theme_url }}" -o theme.zip
          unzip theme.zip -d $THEME_DIR
          rm theme.zip

      - name: Build signed APK
        run: |
          # Configure signing (replace with your keystore setup)
          echo "Setting up signing configuration..."
          mkdir -p ~/.android
          echo "${{ secrets.KEYSTORE }}" > ~/.android/keystore.jks
          base64 --decode ~/.android/keystore.jks > ~/.android/keystore_decoded.jks
          mv ~/.android/keystore_decoded.jks ~/.android/keystore.jks

          ./gradlew assembleRelease \
            -PthemeName="$THEME_NAME" \
            -PversionCode=${{ github.run_number }} \
            -PversionName="1.0.${{ github.run_number }}" \
            -PkeystorePath=~/.android/keystore.jks \
            -PkeystorePassword="${{ secrets.KEYSTORE_PASSWORD }}" \
            -PkeyAlias="${{ secrets.KEY_ALIAS }}" \
            -PkeyPassword="${{ secrets.KEY_PASSWORD }}"

      - name: Rename and prepare APK
        run: |
          mkdir -p $BUILD_DIR
          cp app/build/outputs/apk/release/app-release.apk $BUILD_DIR/$APK_NAME
          echo "APK_VERSION=1.0.${{ github.run_number }}" >> $GITHUB_ENV

      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: $APK_NAME
          path: $BUILD_DIR/$APK_NAME
          retention-days: 7

  deploy_release:
    name: Create GitHub Release
    needs: build_apk
    runs-on: ubuntu-latest
    steps:
      - name: Download APK artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.APK_NAME }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "theme-${{ env.THEME_NAME }}-v${{ env.APK_VERSION }}"
          name: "${{ env.THEME_NAME }} Keyboard Theme v${{ env.APK_VERSION }}"
          body: "Auto-generated APK for ${{ env.THEME_NAME }} theme"
          files: ${{ env.APK_NAME }}
          draft: false
          prerelease: false

  notify:
    name: Notification
    needs: [validate_theme, build_apk]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify success
        if: success() && needs.build_apk.result == 'success'
        run: |
          echo "APK successfully built for theme $THEME_NAME" > message.txt
          echo "Download URL: https://github.com/${{ github.repository }}/releases/download/theme-$THEME_NAME-v${{ env.APK_VERSION }}/$APK_NAME" >> message.txt
          # Add your notification logic here (Slack, email, etc.)

      - name: Notify theme not found
        if: needs.validate_theme.outputs.theme_exists == 'false'
        run: |
          echo "Theme $THEME_NAME not found in repository" > message.txt
          # Add your notification logic here

      - name: Notify build failure
        if: failure() && needs.validate_theme.outputs.theme_exists == 'true'
        run: |
          echo "Build failed for theme $THEME_NAME" > message.txt
          # Add your notification logic here
